/*
Conseguimos um grande avan√ßo at√© aqui fazendo a div.tooltip aparecer e desaparecer na tela.

Passamos por duas t√©cnicas importantes para isso:

Event binding;
Class binding.
Ent√£o, parab√©ns! üëèüéâ

Agora vem comigo ver mais uma t√©cnica muito utilizada, o style binding!

Capturando as coordenadas do mouse
Um recurso muito legal que as Tooltips geralmente t√™m √© posicionar 
o texto que aparece em rela√ß√£o ao elemento ou a posi√ß√£o do mouse. 
Fazer isso da primeira forma, em rela√ß√£o ao elemento, requer um pouco mais de geometria, 
e uma vez que esse n√£o √© o tema deste curso vamos fazer algo mais simples, posicionando 
o texto ao lado do mouse. Embora a gente v√° pelo caminho mais f√°cil, a t√©cnica usada 
para ambos seria a mesma.

Primeiro, precisamos preparar o componente para armazenar as coordenadas do mouse, 
inserindo nele o atributo public mouse = { x: 0, y: 0 };. Com isso, para atribuir 
valor a essa propriedade criaremos o m√©todo alteraPosicaoDaTooltip(x: number, y: number).
Ap√≥s essas duas altera√ß√µes, o c√≥digo do componente no arquivo tooltip-example.componente.ts
ficar√° igual ao do C√≥digo
*/

import { Component } from '@angular/core';

@Component({
  selector: 'app-tooltip-example',
  templateUrl: './tooltip-example.component.html',
  styleUrls: ['./tooltip-example.component.css']
})
export class TooltipExampleComponent {

  public visible = false;
  public mouse = { x: 0, y: 0 };

  alteraPosicaoDaTooltip(x: number, y: number) {
    this.mouse = { x, y };
  }

  exibeTooltip() {
    this.visible = true;
  }

  escondeTooltip() {
    this.visible = false;
  }
} 

/*
Agora, devemos pegar as coordenadas do mouse e transmiti-las ao componente. 
√â f√°cil porque o evento mouseover possui essa informa√ß√£o.

Configurando o event binding para transmitir as coordenadas do mouse
No template do componente, arquivo tooltip-example.componente.html, 
o event binding ser√° alterado conforme vemos no C√≥digo 


<p class="term"
  (mouseover)="alteraPosicaoDaTooltip($event.x, $event.y); exibeTooltip()"
  (mouseleave)="escondeTooltip()">DOM</p>


Perceba que agora utilizamos $event como par√¢metro para alteraPosicaoDaTooltip
($event.x, $event.y). Al√©m disso, invocamos dois m√©todos quando o evento mouseover 
√© emitido, separando-os com um ponto e v√≠rgula (;).

As coordenadas do mouse v√™m do objeto $event, criado quando o evento mouseover 
√© disparado, que possui as propriedades $event.x e $event.y.

Primeira parte conclu√≠da.

Configurando o style binding
Agora, precisamos transmitir as coordenadas x e y do mouse para os atributos 
left e right da div.tooltip, fazendo assim com que esse elemento se mova na p√°gina. 
Para isso usaremos uma t√©cnica chamada style binding, que vincula uma propriedade 
do componente (mouse.x ou mouse.y) a um atributo de um elemento (left ou right).

Esses atributos, left, posi√ß√£o no eixo x, e right, posi√ß√£o no eixo y, 
j√° s√£o acessados nativamente via CSS e o que devemos fazer √© utilizar o 
Angular para gerar c√≥digo CSS inline no elemento que precisa mudar de posi√ß√£o, 
algo como o C√≥digo.

<div left="54px" top="34px"></div>


Essa necessidade √© suprida pelo style binding, que √© configurado usando a sintaxe style.
[nome-da-propriedade-css]. Uma vez que as propriedades left e right recebem valores 
num√©ricos, podemos informar em que unidade de medida do CSS esses valores ser√£o passados, 
como no C√≥digo

<div [class.visible]="visible"
  [style.left.px]="mouse.x" [style.top.px]="mouse.y">
  ...
</div>

Aqui escolhemos pixels (px).

Olhando mais de perto, o style binding...

[style.left.px]=‚Äù14‚Äù
...√© equivalente ao CSS‚Ä¶

{
    left: 14px;
}
...f√°cil, n√©?

Com isso o elemento
j√° aparece na posi√ß√£o em que o mouse estava quando o evento mouseover foi emitido.
*/